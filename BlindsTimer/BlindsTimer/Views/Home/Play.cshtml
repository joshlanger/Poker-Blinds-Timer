@model Tournament
@{
    ViewData["Title"] = "Play"; 
}

<h1>Timer</h1>
<p></p>
<div id="buttonHolder">
    <button id="levelTimerStart" onclick="levelTimer(); disableStart();">Start</button>
    <button id="levelTimerPause" onclick="pauseTimer(); enableStart();" disabled>Pause</button> 
    <button id="fastForward" onclick="skipLevel(); temporarySkipDisable('fastForward');">></button> @*this isn't working correctly on breaks*@
    @*<button id="rewind" onclick="previousLevel(); temporarySkipDisable('rewind');"><</button>*@
</div>
<p></p>

<audio id="sound">
    <source src="~/sounds/zapsplat_technology_cb_radio_two_way_beep_single_39804.mp3"/>
</audio>


<div id="current" class="box-shadow container-fluid" style="background-color:darkseagreen; padding:20px; margin-bottom:20px; display:flex; height:200px;">
    <div class="col-md-6" style="display:flex; flex-direction:column; justify-content: space-between;">
        <p id="level" class="maintext"></p>
        <p id="blinds" class="maintext"></p>
    </div>
    <div class="col-md-6" style="display:flex; flex-direction:column; align-items:center; justify-content:center">
        <p id="timer" style="font-size:500%;  font-weight:600; text-shadow:2px 2px 0 #999"></p>
    </div>
</div>

<div id="next" class="container-fluid box-shadow" style="display:flex; padding:20px; background-color:lightgrey;" >
    <div class="col-md-6" style="display:flex; align-items:center">
        <p style="font-size:300%;  font-weight:600; text-shadow:2px 2px 0 #999">Up Next:</p>
    </div>
    <div class="col-md-6 maintext rightside">
        <p id="nextLevel"></p>
        <p id="nextBlinds"></p>
    </div>
    
    
</div>


<script>

    let levelMinutes = @Model.LevelMinutes;
    let levelSeconds = 0;
    let currentLevel = 0;
    let nextLevel = 1;
    let nextNextLevel = 2;


    let onBreak = false;
    let breakMinutes = @Model.BreakLength;
    let breakSeconds = 0;

    const blindStructure = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model.BlindStructure));
    let timerInterval;
    let breakTimerInterval;

    function levelTimer() {
        onBreak = false;
        timerInterval = setInterval(function () {
            if (levelMinutes === 0 && levelSeconds === 1) {
                if ((currentLevel + 2) % @Model.BreakFrequency === 0) {
                    pauseTimer();
                    breakMinutes = @Model.BreakLength;
                    breakTimer();
                    getBreakButtons();
                    displayBreak();
                    clearBlinds();
                    currentLevel++;
                    displayNextLevel();
                }
                else {

                    levelMinutes = @Model.LevelMinutes;
                    levelSeconds = 0;
                    currentLevel++;
                    nextLevel++;
                    displayLevel();
                    displayNextLevel();
                }
            }
            if (levelMinutes === 0 && levelSeconds <= 6)
            {
                if (levelSeconds === 1) {
                    levelSeconds--;
                    document.getElementById("timer").innerHTML = breakMinutes.toString() + ' : ' + addZero().toString();
                    beep();
                }
                else {
                    levelSeconds--;
                    document.getElementById("timer").innerHTML = levelMinutes.toString() + ' : ' + addZero().toString();
                    beep();
                }
             }
            else {
                if (levelMinutes > 0 && levelSeconds === 0) {
                    levelMinutes -= 1;
                    levelSeconds = 60;
                    levelSeconds--;
                }
                else {
                    levelSeconds--;
                }

                document.getElementById("timer").innerHTML = levelMinutes.toString() + ' : ' + addZero().toString();
            }

        }, 1000);
    }
    function breakTimer() {
        onBreak = true;
        breakTimerInterval = setInterval(function () {
            if (breakMinutes === 0 && breakSeconds === 1) {
                pauseBreakTimer();
                levelMinutes = @Model.LevelMinutes;
                nextLevel++;
                displayLevel();
                displayNextLevel();
                levelSeconds = 0;// making this 59 causes a skip to 58
                levelTimer();
                getLevelButtons();
                @*breakMinutes = @Model.BreakLength;*@
                //breakSeconds = 0;
            }
            if (breakMinutes === 0 && breakSeconds <= 6) {
                if (breakSeconds === 1) {
                    breakSeconds--;
                    document.getElementById("timer").innerHTML = levelMinutes.toString() + ' : ' + addBreakZero().toString();
                    beep();

                }
                else {
                    breakSeconds--;
                    document.getElementById("timer").innerHTML = breakMinutes.toString() + ' : ' + addBreakZero().toString();
                    beep();
                }
            }
            else {
                if (breakMinutes > 0 && breakSeconds === 0) {
                    breakMinutes -= 1;
                    breakSeconds = 60;
                    breakSeconds--;
                }
                else {
                    breakSeconds--;
                }

                document.getElementById("timer").innerHTML = breakMinutes.toString() + ' : ' + addBreakZero().toString();
            }
        }, 1000);

    }

    function pauseTimer() {
        clearInterval(timerInterval);
    }

    function pauseBreakTimer() {
        clearInterval(breakTimerInterval);
    }

    function addZero() {
        if (levelSeconds < 10) {
            let plusZero = '0' + levelSeconds;
            return plusZero;
        }
        return levelSeconds;

    }function addBreakZero() {
        if (breakSeconds < 10) {
            let plusBreakZero = '0' + breakSeconds;
            return plusBreakZero;
        }
        return breakSeconds;
    }

    function displayLevel() {
        for (var key in blindStructure) {
           if (key == currentLevel) {
                document.getElementById("blinds").innerHTML = 'Blinds ' + blindStructure[key].SmallBlind.toString() + ' / ' + blindStructure[key].BigBlind.toString();
                document.getElementById("level").innerHTML = 'Level ' + (currentLevel + 1);
            }
        }
    }
    function displayNextLevel() {
        if ((currentLevel + 2) % @Model.BreakFrequency === 0) {
            document.getElementById("nextBlinds").innerHTML = '';
            document.getElementById("nextLevel").innerHTML = 'Break';
        }
        else {
            for (var key in blindStructure) {
                if (key == nextLevel) {
                    document.getElementById("nextBlinds").innerHTML = 'Blinds ' + blindStructure[key].SmallBlind.toString() + ' / ' + blindStructure[key].BigBlind.toString();
                    document.getElementById("nextLevel").innerHTML = 'Level ' + (nextLevel + 1);
                }
            }
        }
    }
    function displayNextLevelDuringBreak() {
        for (var key in blindStructure) {
            if (key == (nextLevel -1)) {
                document.getElementById("nextBlinds").innerHTML = 'Blinds ' + blindStructure[key].SmallBlind.toString() + ' / ' + blindStructure[key].BigBlind.toString();
                document.getElementById("nextLevel").innerHTML = 'Level ' + (nextLevel);
            }
        }
    }

    function displayBreak() {
        document.getElementById("level").innerHTML = 'Break';

    }
    function clearBlinds() {
        document.getElementById("blinds").innerHTML = '';
    }

    function disableStart() {
        document.getElementById("levelTimerStart").disabled = true;
        document.getElementById("levelTimerPause").disabled = false;
    }

    function enableStart() {
        document.getElementById("levelTimerStart").disabled = false;
        document.getElementById("levelTimerPause").disabled = true;
    }

    //prevents clock issues caused by pressing a button in quick succession
    function temporarySkipDisable(buttonId) {
        let button = document.getElementById(buttonId);
        button.disabled = true;
        setTimeout(function () { button.disabled = false; }, 1000);
    }

    const breakStartButton = document.createElement("button");
    breakStartButton.innerHTML = "Start";
    breakStartButton.disabled = true;
    breakStartButton.onclick = function () {
        breakTimer();
        this.disabled = true;
        breakPauseButton.disabled = false;
    }

    const breakPauseButton = document.createElement("button");
    breakPauseButton.innerHTML = "Pause";
    breakPauseButton.onclick = function () {
        pauseBreakTimer();
        this.disabled = true;
        breakStartButton.disabled = false;
    }

    const levelStartButton = document.getElementById("levelTimerStart");
    const levelPauseButton = document.getElementById("levelTimerPause");
    const levelTimerButtons = document.getElementById("buttonHolder"); //this may not be needed anymore
    function getBreakButtons() {
        levelStartButton.replaceWith(breakStartButton);
        levelPauseButton.replaceWith(breakPauseButton);
    }

    function getLevelButtons() {
        breakStartButton.replaceWith(levelStartButton);
        breakPauseButton.replaceWith(levelPauseButton);
    }

    function skipLevel() {
        let breakLocator = (nextLevel + 1) % @Model.BreakFrequency;
        switch (breakLocator) {
            case 1: 
                if (nextLevel - currentLevel === 2) { //triggered coming out of break
                     pauseBreakTimer();
                    breakMinutes = @Model.BreakLength;
                    breakSeconds = 0;
                    getLevelButtons();
                    currentLevel++;
                    displayLevel();
                    displayNextLevel();
                    levelTimer();
                }
                else {                  
                    levelMinutes = @Model.LevelMinutes;
                    levelSeconds = 0;
                    currentLevel++;
                    nextLevel++;
                    displayLevel();
                    displayNextLevel();
                }
                break;
            case 0: //triggered going into break
                    pauseTimer();
                    breakMinutes = @Model.BreakLength;
                    breakTimer();
                    getBreakButtons();
                    displayBreak();
                    clearBlinds();
                    nextLevel++;
                    displayNextLevelDuringBreak();
                break;
            default:
                    levelMinutes = @Model.LevelMinutes;
                    levelSeconds = 0;
                    currentLevel++;
                    nextLevel++;
                    displayLevel();
                    displayNextLevel();
        }
    }

    function previousLevel() {
        if ((currentLevel) % @Model.BreakFrequency === 0) {
                    pauseTimer();
                    breakMinutes = @Model.BreakLength;
                    breakTimer();
                    getBreakButtons();
                    displayBreak();
                    clearBlinds();
                    currentLevel--;
                    displayNextLevel();
                }
                else {

                    levelMinutes = @Model.LevelMinutes;
                    levelSeconds = 0;
                    currentLevel--;
                    nextLevel--;
                    displayLevel();
                    displayNextLevel();
                }
    }

    function beep() {
        const mySound = document.getElementById("sound");
        mySound.play();
    }
    displayLevel();
    displayNextLevel();

</script>




