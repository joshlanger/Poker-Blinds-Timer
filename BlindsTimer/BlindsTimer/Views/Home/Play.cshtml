@model Tournament
@{
    ViewData["Title"] = "Play"; 
}

<h1>Timer</h1>
<p></p>
<div>
    <button onclick="levelTimer();">Start</button>
    <button onclick="pauseTimer();">Pause</button>
</div>
<p></p>

<audio id="sound">
    <source src="~/sounds/zapsplat_technology_cb_radio_two_way_beep_single_39804.mp3"/>
</audio>


<div id="current" class="box-shadow container-fluid" style="background-color:darkseagreen; padding:20px; margin-bottom:20px; display:flex; height:200px;">
    <div class="col-md-6" style="display:flex; flex-direction:column; justify-content: space-between;">
        <p id="level" class="maintext"></p>
        <p id="blinds" class="maintext"></p>
    </div>
    <div class="col-md-6" style="display:flex; flex-direction:column; align-items:center; justify-content:center">
        <p id="timer" style="font-size:500%;  font-weight:600; text-shadow:2px 2px 0 #999"></p>
    </div>
</div>

<div id="next" class="container-fluid box-shadow" style="display:flex; padding:20px; background-color:lightgrey;" >
    <div class="col-md-6" style="display:flex; align-items:center">
        <p style="font-size:300%;  font-weight:600; text-shadow:2px 2px 0 #999">Up Next:</p>
    </div>
    <div class="col-md-6 maintext rightside">
        <p id="nextLevel"></p>
        <p id="nextBlinds"></p>
    </div>
    
    
</div>


<script>

    let levelMinutes = @Model.LevelMinutes;
    let levelSeconds = 0;
    let currentLevel = 0;
    let nextlevel = 1;

    

    let breakMinutes = @Model.BreakLength;
    //let breakSeconds = 0;

    const blindStructure = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model.BlindStructure));
    let timerInterval;
    let breakTimerInterval;

    function levelTimer() {

        timerInterval = setInterval(function () {
            if (levelMinutes === 0 && levelSeconds === 0) {
                displayBreak();
                levelMinutes = @Model.LevelMinutes;
                levelSeconds = 0;
                currentLevel++;//this whole code block is executing; current level is getting incremented when it shouldn't be?
                nextlevel++;
                displayLevel();
                displayNextLevel();
            }
            if (levelMinutes === 0 && levelSeconds <= 6)
            {
                levelSeconds--;
                document.getElementById("timer").innerHTML = levelMinutes.toString() + ' : ' + addZero().toString();
                beep();
             }
            else {
                if (levelMinutes > 0 && levelSeconds === 0) {
                    levelMinutes -= 1;
                    levelSeconds = 60;
                    levelSeconds--;
                }
                else {
                    levelSeconds--;
                }

                document.getElementById("timer").innerHTML = levelMinutes.toString() + ' : ' + addZero().toString();
            }

        }, 1000);
    }
    function breakTimer() {
        breakTimerInterval = setInterval(function () {
            if (breakMinutes === 0 && levelSeconds === 0) {
                pauseBreakTimer();//this may need to be changed to a function the clears the timer. MOVED from below breakMinutes
                levelTimer();
                breakMinutes = @Model.BreakLength;
                
                //something to remove the display of break
            }
            if (breakMinutes === 0 && levelSeconds <= 6) {
                levelSeconds--;
                document.getElementById("timer").innerHTML = breakMinutes.toString() + ' : ' + addZero().toString();
                beep();
            }
            else {
                if (breakMinutes > 0 && levelSeconds === 0) {
                    breakMinutes -= 1;
                    levelSeconds = 60;
                    levelSeconds--;
                }
                else {
                    levelSeconds--;
                }

                document.getElementById("timer").innerHTML = breakMinutes.toString() + ' : ' + addZero().toString();
            }
        }, 1000);
            
    }

    function pauseTimer() {
        clearInterval(timerInterval);
    }

    function pauseBreakTimer() {
        clearInterval(breakTimerInterval);
    }

    function addZero() {
        if (levelSeconds < 10) {
            let plusZero = '0' + levelSeconds;
            return plusZero;
        }
        return levelSeconds;
    }

    function displayLevel() {
        for (var key in blindStructure) {
            if ((currentLevel + 1) % @Model.BreakFrequency === 0 && breakMinutes < @Model.BreakLength) {
                document.getElementById("level").innerHTML = 'Break'
            }
            else if (key == currentLevel) {
                document.getElementById("blinds").innerHTML = 'Blinds ' + blindStructure[key].SmallBlind.toString() + ' / ' + blindStructure[key].BigBlind.toString();
                document.getElementById("level").innerHTML = 'Level ' + (currentLevel + 1);
            }
        }
    }
    function displayNextLevel() {
        for (var key in blindStructure) {
            if (key == nextlevel) {
                document.getElementById("nextBlinds").innerHTML = 'Blinds ' + blindStructure[key].SmallBlind.toString() + ' / ' + blindStructure[key].BigBlind.toString();
                document.getElementById("nextLevel").innerHTML = 'Level ' + (currentLevel + 2);
            } 
        }
    }
    function displayBreak() {
        if ((currentLevel + 2) % @Model.BreakFrequency === 0) {
            pauseTimer();
            breakTimer();
        }
    }

    function beep() {
        const mySound = document.getElementById("sound");
        mySound.play();
    }
    displayLevel();
    displayNextLevel();

</script>




